Process 1: writer

import os

fifo_path = "mypipe"
os.mkfifo(fifo_path)

with open(fifo_path, "w") as fifo:
    fifo.write("Hello from Process 1")


Process 2: reader

import os

fifo_path = "mypipe"

with open(fifo_path, "r") as fifo:
    data = fifo.read()
    print("Received:", data)



pika method:

the webserver will do this:

import pika


# Connect to RabbitMQ server
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

# Declare a durable queue named 'hello'
channel.queue_declare(queue='hello', durable=True)

# Publish a durable message to the 'hello' queue
channel.basic_publish(exchange='', routing_key='hello', body='Hello from Producer!', properties=pika.BasicProperties(delivery_mode=2))

print(" [x] Sent 'Hello from Producer!'")

# Close the connection
connection.close()



# the game server will do this

import pika

# Connect to RabbitMQ server
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

# Declare a durable queue named 'hello' (optional, but good practice)
channel.queue_declare(queue='hello', durable=True)

# Publish a durable message to the 'hello' queue
channel.basic_publish(exchange='', routing_key='hello', body='Hello from Producer!', properties=pika.BasicProperties(delivery_mode=2))

print(" [x] Sent 'Hello from Producer!'")

# Close the connection
connection.close()


# Start consuming messages
channel.start_consuming()

# game loop will do this

# Callback function to handle incoming messages
import pika

# Callback function to handle incoming messages
def callback(ch, method, properties, body):
    print(" [x] Received %r" % body)
    # Acknowledge the message
    ch.basic_ack(delivery_tag=method.delivery_tag)

# Connect to RabbitMQ server
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

# Consume messages from the 'hello' queue
channel.basic_consume(queue='hello', on_message_callback=callback)

print(' [*] Waiting for messages. To exit press CTRL+C')

# Start consuming messages
channel.start_consuming()
